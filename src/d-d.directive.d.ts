import { AfterViewInit, ComponentFactoryResolver, ElementRef, EventEmitter, Renderer2, ViewContainerRef } from '@angular/core';
import { DDService, IEvent, IPoint } from './d-d.service';
export declare class DDDirective implements AfterViewInit {
    private _elementRef;
    private _render;
    private _resolver;
    private _vcr;
    private _dDService;
    private static COMP;
    container: any;
    config: {
        direction?: 'x' | 'y' | 'grid';
        matClick?: boolean;
        shadow?: boolean;
        elem?: any;
        swipe?: string;
    };
    dChange: EventEmitter<IEvent>;
    dDrop: EventEmitter<IEvent>;
    private _limits;
    private _innerBox;
    private _parent;
    private _point;
    private _shift;
    private _collect;
    private _elem;
    private _margin;
    private _padding;
    customElem: any;
    is: boolean;
    direction: 'x' | 'y' | 'grid';
    materialStyle: boolean;
    shadow: boolean;
    swipeElement: any;
    withContainer: boolean;
    constructor(_elementRef: ElementRef, _render: Renderer2, _resolver: ComponentFactoryResolver, _vcr: ViewContainerRef, _dDService: DDService);
    ngAfterViewInit(): void;
    init(component?: any): void;
    dDservice: DDService;
    onDragStart(): boolean;
    onMouseDown(event: any): void;
    private _setPadding;
    private _setMargin;
    private _setLimits;
    coordinate: any;
    private _addShadow;
    private _removeShadow;
    swipe(point: IPoint): void;
    private _setElements;
    private _updateShadow;
    private _drop;
    private _getIEl;
    private point;
    private _emit;
    matClick(event: any): void;
}
